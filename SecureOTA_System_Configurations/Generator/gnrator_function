from asyncore import write
from doctest import master
from pickle import NONE
from xml.dom.minidom import Element
import xml.etree.ElementTree as ET
from xxlimited import new
pre = ""
machine_name=""

class argument:
    def __init__(self, name, path ,id,direction):
        self.name = name
        self.path=path
        self.id=id
        self.direction=direction
        type_location=path.find("/",5)+1
        self.type=path[type_location:]  
 


class Method:
    def __init__(self,name,id):
        self.name = name
        self.id=id
        self.in_args=[]
        self.out_args=[]
        # print("method initialized")
        
    def add_argument(self,arg):
        if arg.direction=="IN":
            self.in_args.append(arg)
        elif arg.direction=="OUT":
            self.out_args.append(arg)   
    


class Field:
    def __init__(self,name,id,path,getter,notifier,setter):
        self.path=path
        self.name=name
        self.id=id
        self.getter=getter
        self.notifier=notifier
        self.setter=setter


class ServiceInf:
    def __init__(self,name,id):
        self.methods=[]
        self.namespace=[]
        self.ServiceInf_name=name
        self.ServiceInf_id=id
        self.field=[]
    
    def add_method(self,method):
        self.methods.append(method)
        # print("method added")
    
    def add_field(self,field):
        self.field.append(field)
        # print("field added")
    
    def add_namespace(self,namespace):
        self.namespace.append(namespace)
    

class ServiceInfParser:
    def __init__(self,path):
        self.service_interface={}
        self.tree = ET.parse(path)

    def add_Service(self,name,service):
        self.service_interface[name]=service
        # print("Service Inf added to map successfulllyyyyy")
    
    def Parse(self):
        root = self.tree.getroot()
        prelist = root.tag.split("}")
        pre = prelist[0] + "}"
        Tempnode = root.find(pre + "AR-PACKAGES")
        Tempnode = Tempnode.find(pre + "AR-PACKAGE")
        machinnode = Tempnode.find(pre + "SHORT-NAME")
        machine_name=machinnode.text
        Tempnode = Tempnode.find(pre + "AR-PACKAGES")
        d=Tempnode.getchildren()
        for x in d:
            # print(x.tag)
            # print(x.attrib)
            if x.find(pre + "SHORT-NAME").text=="service_interfaces":
                interface_p=x
        # print(interface_p.tag) 
        Elements=interface_p.find(pre+"ELEMENTS")
        # print(Elements.tag)
        nodes=Elements.getchildren()
        for SI in nodes:
            id=SI.attrib
            name=SI.find(pre+"SHORT-NAME").text
            s=ServiceInf(name,id)
            # print("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@")
            # print(s.ServiceInf_name,s.ServiceInf_id)
            nspaces_=SI.find(pre+"NAMESPACES")
            nss=nspaces_.getchildren()
            for i in nss:
                nspace=i.find(pre+"SHORT-NAME")
                s.add_namespace(nspace.text)
            # s.add_namespace(nspaces_)
            f=SI.find(pre+"FIELDS")
            if(f!=None):
                f=f.getchildren()
                for field in f:
                    id=field.attrib
                    name=field.find(pre+"SHORT-NAME").text
                    path=field.find(pre+"TYPE-TREF").text
                    getter=field.find(pre+"HAS-GETTER").text
                    setter=field.find(pre+"HAS-SETTER").text
                    notifier=field.find(pre+"HAS-NOTIFIER").text
                    new_field=Field(name,id,path,getter,notifier,setter)
                    s.add_field(new_field)
            m=SI.find(pre+"METHODS").getchildren()
            for i in m:
                id=i.attrib
                name=i.find(pre+"SHORT-NAME").text
                m_new=Method(name,id)
                # print(m_new.name,m_new.id)
                args=i.find(pre+"ARGUMENTS")
                if args!=None:
                    sss=args.getchildren()
                    for x in sss:
                        # print(x.attrib)
                        arg_id=x.attrib
                        arg_name=x.find(pre+"SHORT-NAME").text
                        arg_path=x.find(pre+"TYPE-TREF").text
                        arg_dir=x.find(pre+"DIRECTION").text
                        a=argument(arg_name,arg_path,arg_id,arg_dir)
                        m_new.add_argument(a)
                s.add_method(m_new)
                # print("#####################")
            self.add_Service(s.ServiceInf_name,s)

def new_line(fd):
    fd.write("\n")

def method_genrator(fd,method_name,method_id,service_id,in_args,out_args):
    method_input=method_name+"Input"
    method_output=method_name+"Output"
    fd.write("                    class ")
    fd.write(method_name)
    fd.write(" : public ara::com::proxy::method::MethodBase")
    new_line(fd)
    fd.write("                    {")
    new_line(fd)
    fd.write("                    public:")
    new_line(fd)
    fd.write("                        ")
    fd.write(method_name)
    fd.write("(std::shared_ptr<ara::com::NetworkBindingBase> h) : MethodBase(h, ")
    fd.write(method_id)
    fd.write(") {}")
    new_line(fd)
    if(len(out_args)!=0):
        fd.write("                        ")
        fd.write(method_name)
        fd.write("output")
    else:
        fd.write("                        void ")
    fd.write(" operator()(")
    length=len(in_args)
    counter=0
    for i in in_args:
        counter+=1
        fd.write(i.type)
        fd.write(" ")
        fd.write(i.name)
        if counter<length:
            fd.write(" , ")
    fd.write(")")
    new_line(fd)
    fd.write("                            {")
    new_line(fd)
    if len(in_args)!=0:
        fd.write("                            ")
        fd.write(method_input)
        fd.write(" in;")
        new_line(fd)
        for i in in_args:
            fd.write("                            in.")
            fd.write(i.name)
            fd.write(" = ")
            fd.write(i.name)
            fd.write(" ; ")
            new_line(fd)
    if len(out_args)!=0:
        fd.write("                            ")
        fd.write(method_output)
        fd.write(" out; ")
        new_line(fd)
    if  len(out_args)!=0 or  len(in_args)!=0:
        fd.write("                            process_method_call<")
        if len(out_args)!=0:
            fd.write(method_output)
        if len(in_args)!=0:
            fd.write(" , ")
            fd.write(method_input)
        fd.write(">")
        fd.write(" (")    
        if len(in_args)!=0:
            fd.write("in , ")
        if len(out_args)!=0:
            fd.write("out")
        fd.write(")")    
    else:
        fd.write("                            process_method_call();")
    new_line(fd)
    fd.write("                            ara::com::AddMethodCall(")
    fd.write("1 , ")
    fd.write(method_name)
    fd.write(" , ara::com::MethodType::Proxy_Method, ")
    fd.write("1")
    fd.write(" , Cluster_Name);")
    new_line(fd)
    if len(out_args)!=0:
        fd.write("                            return out;")
    new_line(fd)
    fd.write("                        }")
    new_line(fd)
    fd.write("                    };")
    new_line(fd)    
    
def class_genrator(fd,service):
    if service.ServiceInf_name=="UpdateRequest":
        service_id="1"
    elif service.ServiceInf_name=="PackageManager":    
        service_id="2"
    service_proxy_name=service.ServiceInf_name+"proxy"
    fd.write("                class ")
    fd.write(service.ServiceInf_name)
    fd.write(" : public ara::com::proxy::ProxyBase")
    new_line(fd)
    fd.write("                {")
    new_line(fd)
    fd.write("                public:")
    new_line(fd)
    fd.write("                    ")
    fd.write(service_proxy_name)
    fd.write("(HandleType handle) : ProxyBase(handle), ")
    counter=0
    length=len(service.methods)
    for i in service.methods:
        counter+=1
        fd.write(i.name)
        fd.write("(handle.ptr2bindingProtocol) ")
        if counter<length:
            fd.write(", ")
    new_line(fd)
    fd.write("                    {")
    new_line(fd)
    fd.write("                    }")
    new_line(fd)
    fd.write("                    static ara::com::ServiceHandleContainer<ProxyBase::HandleType> FindService()")
    new_line(fd)
    fd.write("                    {")
    new_line(fd)
    fd.write('                        return ara::com::proxy::ProxyBase::FindService(CUSTOMIZED_PROJECT_PATH + "executables/ucm/0.1/etc/service_manifest.json", Cluster_Name, ')
    fd.write(service_id)
    fd.write(');')
    new_line(fd)
    fd.write("                    }")
    new_line(fd)
    fd.write("                    static ara::com::ServiceHandleContainer<ProxyBase::HandleType> FindService(ara::com::InstanceIdentifier InstanceID)")
    new_line(fd)
    fd.write("                    {")
    new_line(fd)
    fd.write('                        return ara::com::proxy::ProxyBase::FindService(CUSTOMIZED_PROJECT_PATH + "executables/ucm/0.1/etc/service_manifest.json", Cluster_Name, ')
    fd.write(service_id)
    fd.write(', InstanceID);')
    new_line(fd)
    fd.write("                    }")
    new_line(fd)
    for m in service.methods:
        fd.write("                    methods::")
        fd.write(m.name)
        fd.write(" ")
        fd.write(m.name)
        fd.write(";")
        new_line(fd)
    for f in service.field:
        if f.setter == "true":
            fd.write("                    fields::")
            f_name="Set"+f.name
            fd.write(f.name)
            fd.write(" ")
            fd.write(f_name)
            fd.write(";")
            new_line(fd)
        if f.getter == "true":
            fd.write("                    fields::")
            f_name="Get"+f.name
            fd.write(f_name)
            fd.write(" ")
            fd.write(f_name)
            fd.write(";")
            new_line(fd)    
        if f.notifier == "true":
            fd.write("                    fields::")
            f_name="notifier"+f.name
            fd.write(f_name)
            fd.write(" ")
            fd.write(f_name)
            fd.write(";")
            new_line(fd)
        

def field_helper(fd,service,decider,name,id):
            f_name=decider+name
            output_type=decider+f.name
            fd.write("                    class ")
            fd.write(f_name)
            fd.write(" : public ara::com::proxy::method::MethodBase")
            new_line(fd)
            fd.write("                    {")
            new_line(fd)
            fd.write("                    public:")
            new_line(fd)
            fd.write("                        GetCurrentStatus(std::shared_ptr<ara::com::NetworkBindingBase> h) : MethodBase(h, ")
            fd.write(id)
            fd.write(") {}")
            new_line(fd)
            fd.write("                        ")
            fd.write(f_name)
            fd.write(" operator()()")
            new_line(fd)
            fd.write("                        {")
            new_line(fd)
            fd.write("                            ")
            fd.write(output_type)
            fd.write(" out ;")
            new_line(fd)
            fd.write("                            process_method_call<")
            fd.write(output_type)
            fd.write(")>(out);")
            new_line(fd)
            fd.write("                            ara::com::AddMethodCall(")
            fd.write(id)
            fd.write(", ")
            fd.write('"')
            fd.write(f_name)
            fd.write('", ')
            fd.write("ara::com::MethodType::Proxy_Method,")
            if service.ServiceInf_name=="UpdateRequest":
                service_id="1"
            elif service.ServiceInf_name=="PackageManager":    
                service_id="2"
            fd.write(service_id)
            fd.write(", Cluster_Name);")
            new_line(fd)
            fd.write("                            return out;")
            new_line(fd)
            fd.write("                        }")
        

def field_genrator(fd,service,id):
    fd.write("                namespace fields")
    new_line(fd)
    fd.write("                {")
    new_line(fd)
    for f in service.field:
        if f.getter == "true":
            decider="Get"
            field_helper(fd,service,decider,f.name,id)

        if f.setter == "true":
            decider="Set"
            field_helper(fd,service,decider,f.name,id)
           
        if f.notifier == "true":
            decider="Notify"
            field_helper(fd,service,decider,f.name,id)
        
        new_line(fd)
        fd.write("                };")
        new_line(fd)



SI_parser=ServiceInfParser("service_interfaces.arxml")
SI_parser.Parse()

for i in SI_parser.service_interface.keys():

    filename=i+"proxy.hpp"
    f = open(filename, "w")
    kk=SI_parser.service_interface[i]
    if len(kk.field)>0:
        field_genrator(f,kk,"10")

    f.write("                namespace methods ")
    new_line(f)
    f.write("                { ")
    new_line(f)
    mm=kk.methods
    for j in mm:
        method_genrator(f,j.name,"1",3,j.in_args,j.out_args)
    f.write("                }")
    new_line(f)
    
    
          

f.close()
